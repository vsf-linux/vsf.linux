 editors/awk.c                    |   4 +-
 include/libbb.h                  | 153 ++++++++++++++++++++++++++++++++++++++-
 include/platform.h               |  10 ++-
 init/init.c                      | 105 +++++++++++++++++++++++++++
 libbb/appletlib.c                |   4 +
 libbb/auto_string.c              |   5 ++
 libbb/bbunit.c                   |   6 ++
 libbb/common_bufsiz.c            |   2 +
 libbb/crc32.c                    |   2 +
 libbb/default_error_retval.c     |   2 +
 libbb/getopt32.c                 |  16 ++--
 libbb/hash_md5_sha.c             |   4 +
 libbb/inet_common.c              |   7 ++
 libbb/inode_hash.c               |   4 +
 libbb/lineedit.c                 |   4 +
 libbb/lineedit_ptr_hack.c        |   2 +
 libbb/makedev.c                  |   4 +-
 libbb/pidfile.c                  |   2 +
 libbb/procps.c                   |   4 +
 libbb/ptr_to_globals.c           |   2 +
 libbb/pw_encrypt.c               |   5 ++
 libbb/signals.c                  |   2 +
 libbb/u_signal_names.c           |   2 +-
 libbb/verror_msg.c               |   4 +
 libbb/xfuncs.c                   |   6 +-
 loginutils/addgroup.c            |   2 +-
 loginutils/adduser.c             |   2 +-
 miscutils/fbsplash.c             |   2 +-
 networking/libiproute/rt_names.c |  20 ++---
 networking/libiproute/rtm_map.c  |   2 +-
 networking/netstat.c             |   4 +-
 networking/tls.c                 |   2 +-
 shell/ash.c                      |   2 +-
 shell/hush.c                     | 109 ++++++++++++++++++++++++++++
 34 files changed, 471 insertions(+), 35 deletions(-)

diff --git a/editors/awk.c b/editors/awk.c
index 728ee8685..b3b52f106 100644
--- a/editors/awk.c
+++ b/editors/awk.c
@@ -991,7 +991,7 @@ static void setari_u(var *a, int idx, const char *s)
 {
 	var *v;
 
-	v = findvar(iamarray(a), itoa(idx));
+	v = findvar(iamarray(a), busybox_itoa(idx));
 	setvar_u(v, s);
 }
 
@@ -3264,7 +3264,7 @@ static var *evaluate(node *op, var *res)
 # endif
 				R_d = (double)v / 0x8000000000000000ULL;
 #else
-# error Not implemented for this value of RAND_MAX
+				R_d = (double)rand() / (RAND_MAX + 1);
 #endif
 				break;
 			}
diff --git a/include/libbb.h b/include/libbb.h
index cca33a177..c5a9abcac 100644
--- a/include/libbb.h
+++ b/include/libbb.h
@@ -55,6 +55,21 @@
 #include <sys/param.h>
 #include <pwd.h>
 #include <grp.h>
+
+#ifdef __VSF__
+# include <getopt.h>
+# include "vsf_porting/libbb_dynlib.h"
+
+// remove __reserved in sal.h from M$
+# ifdef __reserved
+#  undef __reserved
+# endif
+
+# ifndef SIGWINCH
+#  define SIGWINCH 28
+# endif
+#endif
+
 #if ENABLE_FEATURE_SHADOWPASSWDS
 # if !ENABLE_USE_BB_SHADOW
 /* If using busybox's shadow implementation, do not include the shadow.h
@@ -182,7 +197,9 @@
 
 /* Some libc's forget to declare these, do it ourself */
 
+#ifndef __VSF__
 extern char **environ;
+#endif
 /* klogctl is in libc's klog.h, but we cheat and not #include that */
 int klogctl(int type, char *b, int len);
 #ifndef PATH_MAX
@@ -311,7 +328,21 @@ typedef unsigned long long uoff_t;
  * Even if sizeof(off_t) == sizeof(int), off_t is typedef'ed to long anyway.
  * gcc will throw warnings on printf("%d", off_t)... Have to use %ld etc.
  */
-# if UINT_MAX == ULONG_MAX
+# ifdef __VSF__
+#  ifdef __VSF64__
+typedef unsigned long long uoff_t;
+#   define XATOOFF(a) xatoull_range((a), 0, LLONG_MAX)
+#   define BB_STRTOOFF bb_strtoull
+#   define STRTOOFF strtoull
+#   define OFF_FMT "ll"
+#  else
+typedef unsigned long uoff_t;
+#   define XATOOFF(a) xatoi_positive(a)
+#   define BB_STRTOOFF bb_strtou
+#   define STRTOOFF strtol
+#   define OFF_FMT "l"
+#  endif
+# elif UINT_MAX == ULONG_MAX
 typedef unsigned long uoff_t;
 #  define XATOOFF(a) xatoi_positive(a)
 #  define BB_STRTOOFF bb_strtou
@@ -383,10 +414,88 @@ struct BUG_off_t_size_is_misdetected {
 # define BB_GLOBAL_CONST const
 #endif
 
+#ifdef __VSF__
+struct globals;
+struct addr;
+struct ino_dev_hash_bucket_struct;
+typedef struct cache_t cache_t;
+struct lineedit_statics;
+struct const_des_ctx;
+struct des_ctx;
+typedef struct llist_t {
+	struct llist_t *link;
+	char *data;
+} llist_t;
+struct __busybox_libbb_ctx {
+	int * bb_errno;
+	const char *applet_name;
+	smallint bb_got_signal;
+	bool re_execed;
+	uint32_t option_mask32;
+	smallint wrote_pidfile;
+	const char *msg_eol;
+	smallint logmode;
+	uint8_t xfunc_error_retval;
+	uint32_t *global_crc32_table;
+	struct globals *ptr_to_globals;
+	char bb_common_bufsiz1[1024];
+
+	// verror_msg.c
+	struct {
+		smallint syslog_level;
+	} verror_msg;
+	// bbunit.c
+	struct {
+		llist_t *tests;
+		unsigned tests_registered;
+		int test_retval;
+	} bbunit;
+	struct {
+		char *saved[4];
+		uint8_t cur_saved;
+	} auto_string;
+#if ENABLE_SHA1_HWACCEL || ENABLE_SHA256_HWACCEL
+	struct {
+		smallint shaNI;
+	} hash_md5_sha;
+#endif
+	struct {
+		struct {
+			struct addr *cache;
+		} fn_INET_rresolve;
+	} inet_common;
+	struct {
+		struct ino_dev_hash_bucket_struct **ino_dev_hashtable;
+	} inode_hash;
+	struct {
+		struct lineedit_statics *lineedit_ptr_to_statics;
+	} lineedit_ptr_hack;
+	struct {
+		cache_t *cache_user_group;
+	} procps;
+	struct {
+		struct const_des_ctx *des_cctx;
+		struct des_ctx *des_ctx;
+	} pw_encrypt;
+	struct {
+		char local_buf[sizeof(int) * 3];
+	} xfuncs;
+	struct {
+		uint8_t buffer[128];
+	} __args;
+};
+declare_vsf_busybox_mod(libbb)
+# define libbb_ctx ((struct __busybox_libbb_ctx *)vsf_linux_dynlib_ctx_get(&vsf_busybox_mod_name(libbb)))
+#endif
+
 #if defined(errno)
 /* If errno is a define, assume it's "define errno (*__errno_location())"
  * and we will cache it's result in this variable */
+# ifdef __VSF__
+#  define bb_errno (libbb_ctx->bb_errno)
+# else
 extern int *BB_GLOBAL_CONST bb_errno;
+# endif
 # undef errno
 # define errno (*bb_errno)
 # define bb_cached_errno_ptr 1
@@ -637,7 +746,11 @@ int sigprocmask_allsigs(int how) FAST_FUNC;
 /* Return old set in the same set: */
 int sigprocmask2(int how, sigset_t *set) FAST_FUNC;
 /* Standard handler which just records signo */
+# ifdef __VSF__
+# define bb_got_signal (libbb_ctx->bb_got_signal)
+#else
 extern smallint bb_got_signal;
+#endif
 void record_signo(int signo); /* not FAST_FUNC! */
 
 
@@ -1085,7 +1198,7 @@ char *safe_gethostname(void) FAST_FUNC;
 char* str_tolower(char *str) FAST_FUNC;
 
 char *utoa(unsigned n) FAST_FUNC;
-char *itoa(int n) FAST_FUNC;
+char *busybox_itoa(int n) FAST_FUNC;
 /* Returns a pointer past the formatted number, does NOT null-terminate */
 char *utoa_to_buf(unsigned n, char *buf, unsigned buflen) FAST_FUNC;
 char *itoa_to_buf(int n, char *buf, unsigned buflen) FAST_FUNC;
@@ -1318,7 +1431,11 @@ enum {
 # define bb_daemonize_or_rexec(flags, argv) bb_daemonize_or_rexec(flags)
 # define bb_daemonize(flags)                bb_daemonize_or_rexec(flags, bogus)
 #else
+# ifdef __VSF__
+#  define re_execed (libbb_ctx->re_execed)
+# else
   extern bool re_execed;
+# endif
   /* Note: re_exec() and fork_or_rexec() do argv[0][0] |= 0x80 on NOMMU!
    * _Parent_ needs to undo it if it doesn't want to have argv[0] mangled.
    */
@@ -1343,7 +1460,11 @@ int sanitize_env_if_suid(void) FAST_FUNC;
 void make_all_argv_opts(char **argv) FAST_FUNC;
 char* single_argv(char **argv) FAST_FUNC;
 extern const char *const bb_argv_dash[]; /* { "-", NULL } */
+# ifdef __VSF__
+#  define option_mask32 (libbb_ctx->option_mask32)
+# else
 extern uint32_t option_mask32;
+# endif
 uint32_t getopt32(char **argv, const char *applet_opts, ...) FAST_FUNC;
 # define No_argument "\0"
 # define Required_argument "\001"
@@ -1380,10 +1501,12 @@ uint32_t getopt32long(char **argv, const char *optstring, const char *longopts,
  * of "llist-compatible" structs, and using llist_FOO functions
  * on them.
  */
+#ifndef __VSF__
 typedef struct llist_t {
 	struct llist_t *link;
 	char *data;
 } llist_t;
+#endif
 void llist_add_to(llist_t **old_head, void *data) FAST_FUNC;
 void llist_add_to_end(llist_t **list_head, void *data) FAST_FUNC;
 void *llist_pop(llist_t **elm) FAST_FUNC;
@@ -1399,7 +1522,11 @@ llist_t *llist_find_str(llist_t *first, const char *str) FAST_FUNC;
  * to create pidfiles regardless of FEATURE_PIDFILE */
 #if ENABLE_FEATURE_PIDFILE || defined(WANT_PIDFILE)
 /* True only if we created pidfile which is *file*, not /dev/null etc */
+# ifdef __VSF__
+#  define wrote_pidfile (libbb_ctx->wrote_pidfile)
+# else
 extern smallint wrote_pidfile;
+# endif
 void write_pidfile(const char *path) FAST_FUNC;
 void write_pidfile_std_path_and_ext(const char *path) FAST_FUNC;
 void remove_pidfile_std_path_and_ext(const char *path) FAST_FUNC;
@@ -1418,9 +1545,15 @@ enum {
 	LOGMODE_SYSLOG = (1 << 1) * ENABLE_FEATURE_SYSLOG,
 	LOGMODE_BOTH = LOGMODE_SYSLOG + LOGMODE_STDIO,
 };
+#ifdef __VSF__
+# define msg_eol (libbb_ctx->msg_eol)
+# define logmode (libbb_ctx->logmode)
+# define xfunc_error_retval (libbb_ctx->xfunc_error_retval)
+#else
 extern const char *msg_eol;
 extern smallint logmode;
 extern uint8_t xfunc_error_retval;
+#endif
 extern void (*die_func)(void);
 void xfunc_die(void) NORETURN FAST_FUNC;
 void bb_show_usage(void) NORETURN FAST_FUNC;
@@ -2189,7 +2322,11 @@ enum {
 	SHA3_OUTSIZE   = 28,
 };
 
+#ifdef __VSF__
+# define global_crc32_table (libbb_ctx->global_crc32_table)
+#else
 extern uint32_t *global_crc32_table;
+#endif
 uint32_t *crc32_filltable(uint32_t *tbl256, int endian) FAST_FUNC;
 uint32_t *crc32_new_table_le(void) FAST_FUNC;
 uint32_t *global_crc32_new_table_le(void) FAST_FUNC;
@@ -2228,7 +2365,11 @@ unsigned ubi_devnum_from_devname(const char *str) FAST_FUNC;
 int ubi_get_volid_by_name(unsigned ubi_devnum, const char *vol_name) FAST_FUNC;
 
 
+#ifdef __VSF__
+# define applet_name (libbb_ctx->applet_name)
+#else
 extern const char *applet_name;
+#endif
 
 /* Some older linkers don't perform string merging, we used to have common strings
  * as global arrays to do it by hand. But:
@@ -2294,7 +2435,11 @@ struct globals;
 /* '*const' ptr makes gcc optimize code much better.
  * Magic prevents ptr_to_globals from going into rodata.
  * If you want to assign a value, use SET_PTR_TO_GLOBALS(x) */
+#ifdef __VSF__
+# define ptr_to_globals (libbb_ctx->ptr_to_globals)
+#else
 extern struct globals *BB_GLOBAL_CONST ptr_to_globals;
+#endif
 
 #define barrier() asm volatile ("":::"memory")
 
@@ -2414,7 +2559,9 @@ do { \
 	(sizeof(field) == 4 ? SWAP_LE32(field) : BUG_wrong_field_size())
 
 
-#define ARRAY_SIZE(x) ((unsigned)(sizeof(x) / sizeof((x)[0])))
+#ifndef ARRAY_SIZE
+# define ARRAY_SIZE(x) ((unsigned)(sizeof(x) / sizeof((x)[0])))
+#endif
 #define BUILD_BUG_ON(condition) ((void)sizeof(char[1 - 2*!!(condition)]))
 
 
diff --git a/include/platform.h b/include/platform.h
index ea0512f36..3eeeaf85d 100644
--- a/include/platform.h
+++ b/include/platform.h
@@ -7,6 +7,10 @@
 #ifndef BB_PLATFORM_H
 #define BB_PLATFORM_H 1
 
+#ifdef __VSF__
+# include "autoconf.h"
+# undef UNICODE
+#endif
 
 /* Convenience macros to test the version of gcc. */
 #undef __GNUC_PREREQ
@@ -24,7 +28,7 @@
 # endif
 #endif
 
-#if !__GNUC_PREREQ(2,7)
+#if !__GNUC_PREREQ(2,7) && !defined(__VSF__)
 # ifndef __attribute__
 #  define __attribute__(x)
 # endif
@@ -318,7 +322,9 @@ typedef unsigned smalluint;
  || defined __dietlibc__ \
  || defined __BIONIC__ \
  || defined _NEWLIB_VERSION
-# include <features.h>
+# ifndef __VSF__
+#  include <features.h>
+# endif
 #endif
 
 /* Define bb_setpgrp */
diff --git a/init/init.c b/init/init.c
index 1e1ce833d..5b8f77d81 100644
--- a/init/init.c
+++ b/init/init.c
@@ -476,6 +476,108 @@ static void init_exec(const char *command)
 }
 
 /* Used only by run_actions */
+#ifdef __VSF__
+
+#define __VSF_LINUX_CLASS_INHERIT__
+#include <unistd.h>
+#include <spawn.h>
+
+extern int __vsf_linux_spawn(pid_t *pid, vsf_linux_main_entry_t entry,
+                const posix_spawn_file_actions_t *actions,
+                const posix_spawnattr_t *attr,
+                char * const argv[], char * const env[], void *priv, int priv_size);
+extern void * __vsf_linux_get_process_priv(vsf_linux_process_t *process);
+
+struct action_process_ctx {
+	const struct init_action *a;
+};
+
+static int __action_process(int argc, char *argv[])
+{
+	struct __busybox_libbb_ctx *lbb_ctx = (struct __busybox_libbb_ctx *)__vsf_linux_get_process_priv(NULL);
+	struct action_process_ctx *ctx = (struct action_process_ctx *)lbb_ctx->__args.buffer;
+	const struct init_action *a = ctx->a;
+
+	declare_vsf_busybox_mod(libbb_fork);
+	vsf_linux_dynlib_ctx_set(&vsf_busybox_mod_name(libbb_fork), lbb_ctx);
+
+	/* Reset signal handlers that were set by the parent process */
+	reset_sighandlers_and_unblock_sigs();
+
+	/* Create a new session and make ourself the process group leader */
+	setsid();
+
+	/* Open the new terminal device */
+	if (!open_stdio_to_tty(a->terminal))
+		_exit(EXIT_FAILURE);
+
+	/* NB: on NOMMU we can't wait for input in child, so
+	 * "askfirst" will work the same as "respawn". */
+	if (BB_MMU && (a->action_type & ASKFIRST)) {
+		static const char press_enter[] ALIGN1 =
+#ifdef CUSTOMIZED_BANNER
+#include CUSTOMIZED_BANNER
+#endif
+			"\nPlease press Enter to activate this console. ";
+		char c;
+		/*
+		 * Save memory by not exec-ing anything large (like a shell)
+		 * before the user wants it. This is critical if swap is not
+		 * enabled and the system has low memory. Generally this will
+		 * be run on the second virtual console, and the first will
+		 * be allowed to start a shell or whatever an init script
+		 * specifies.
+		 */
+		dbg_message(L_LOG, "waiting for enter to start '%s'"
+					"(pid %d, tty '%s')\n",
+				a->command, getpid(), a->terminal);
+		full_write(STDOUT_FILENO, press_enter, sizeof(press_enter) - 1);
+		while (safe_read(STDIN_FILENO, &c, 1) == 1 && c != '\n')
+			continue;
+	}
+
+	/*
+	 * When a file named /.init_enable_core exists, setrlimit is called
+	 * before processes are spawned to set core file size as unlimited.
+	 * This is for debugging only.  Don't use this is production, unless
+	 * you want core dumps lying about....
+	 */
+	if (ENABLE_FEATURE_INIT_COREDUMPS) {
+		if (access("/.init_enable_core", F_OK) == 0) {
+			struct rlimit limit;
+			limit.rlim_cur = RLIM_INFINITY;
+			limit.rlim_max = RLIM_INFINITY;
+			setrlimit(RLIMIT_CORE, &limit);
+		}
+	}
+
+	/* Log the process name and args */
+	message(L_LOG, "starting pid %u, tty '%s': '%s'",
+			(int)getpid(), a->terminal, a->command);
+
+	/* Now run it.  The new program will take over this PID,
+	 * so nothing further in init.c should be run. */
+	init_exec(a->command);
+	/* We're still here?  Some error happened. */
+	_exit(-1);
+}
+
+static pid_t run(const struct init_action *a)
+{
+	struct action_process_ctx ctx = {
+		.a			= a,
+	};
+	struct __busybox_libbb_ctx *lbb_ctx = libbb_ctx;
+	memcpy(lbb_ctx->__args.buffer, &ctx, sizeof(ctx));
+	pid_t pid = -1;
+	if ((__vsf_linux_spawn(&pid, __action_process, NULL, NULL, NULL, NULL, lbb_ctx, sizeof(*lbb_ctx)) < 0) || (pid < 0)) {
+		message(L_LOG | L_CONSOLE, "can't spawn");
+		return -1;
+	}
+	return pid;
+}
+
+#else
 static pid_t run(const struct init_action *a)
 {
 	pid_t pid;
@@ -552,6 +654,7 @@ static pid_t run(const struct init_action *a)
 	/* We're still here?  Some error happened. */
 	_exit(-1);
 }
+#endif
 
 static struct init_action *mark_terminated(pid_t pid)
 {
@@ -682,9 +785,11 @@ static void parse_inittab(void)
 		/* Askfirst shell on tty1-4 */
 		new_init_action(ASKFIRST, bb_default_login_shell, "");
 //TODO: VC_1 instead of ""? "" is console -> ctty problems -> angry users
+#ifndef __VSF__
 		new_init_action(ASKFIRST, bb_default_login_shell, VC_2);
 		new_init_action(ASKFIRST, bb_default_login_shell, VC_3);
 		new_init_action(ASKFIRST, bb_default_login_shell, VC_4);
+#endif
 		/* Reboot on Ctrl-Alt-Del */
 		new_init_action(CTRLALTDEL, "reboot", "");
 		/* Umount all filesystems on halt/reboot */
diff --git a/libbb/appletlib.c b/libbb/appletlib.c
index d5335d353..e3c73a0bf 100644
--- a/libbb/appletlib.c
+++ b/libbb/appletlib.c
@@ -283,10 +283,12 @@ void lbb_prepare(const char *applet
  * (--gc-sections would be even better....)
  */
 
+#ifndef __VSF__
 const char *applet_name;
 #if !BB_MMU
 bool re_execed;
 #endif
+#endif
 
 
 /* If not built as a single-applet executable... */
@@ -1028,6 +1030,8 @@ get_script_content(unsigned n UNUSED_PARAM)
 
 #if ENABLE_BUILD_LIBBUSYBOX
 int lbb_main(char **argv)
+#elif defined(__VSF__) && !defined(__VSF_APPLET__)
+int lbb_main(int argc UNUSED_PARAM, char **argv)
 #else
 int main(int argc UNUSED_PARAM, char **argv)
 #endif
diff --git a/libbb/auto_string.c b/libbb/auto_string.c
index ae940069a..b90cdc533 100644
--- a/libbb/auto_string.c
+++ b/libbb/auto_string.c
@@ -12,8 +12,13 @@
 
 char* FAST_FUNC auto_string(char *str)
 {
+#ifdef __VSF__
+# define saved (libbb_ctx->auto_string.saved)
+# define cur_saved (libbb_ctx->auto_string.cur_saved)
+#else
 	static char *saved[4];
 	static uint8_t cur_saved; /* = 0 */
+#endif
 
 	free(saved[cur_saved]);
 	saved[cur_saved] = str;
diff --git a/libbb/bbunit.c b/libbb/bbunit.c
index ccd909d78..487628219 100644
--- a/libbb/bbunit.c
+++ b/libbb/bbunit.c
@@ -17,9 +17,15 @@
 
 #include "libbb.h"
 
+#ifdef __VSF__
+# define tests (libbb_ctx->bbunit.tests)
+# define tests_registered (libbb_ctx->bbunit.tests_registered)
+# define test_retval (libbb_ctx->bbunit.test_retval)
+#else
 static llist_t *tests = NULL;
 static unsigned tests_registered = 0;
 static int test_retval;
+#endif
 
 void bbunit_registertest(struct bbunit_listelem *test)
 {
diff --git a/libbb/common_bufsiz.c b/libbb/common_bufsiz.c
index 6bc6d7bc9..d926de13f 100644
--- a/libbb/common_bufsiz.c
+++ b/libbb/common_bufsiz.c
@@ -50,7 +50,9 @@
 /* We use it for "global" data via *(struct global*)bb_common_bufsiz1.
  * Since gcc insists on aligning struct global's members, it would be a pity
  * (and an alignment fault on some CPUs) to mess it up. */
+# ifndef __VSF__
 char bb_common_bufsiz1[COMMON_BUFSIZE] ALIGNED(sizeof(long long));
+# endif
 
 #else
 
diff --git a/libbb/crc32.c b/libbb/crc32.c
index 728bcb736..33d7ad501 100644
--- a/libbb/crc32.c
+++ b/libbb/crc32.c
@@ -17,7 +17,9 @@
  */
 #include "libbb.h"
 
+#ifndef __VSF__
 uint32_t *global_crc32_table;
+#endif
 
 uint32_t* FAST_FUNC crc32_filltable(uint32_t *crc_table, int endian)
 {
diff --git a/libbb/default_error_retval.c b/libbb/default_error_retval.c
index fc6a5364a..c797a20c8 100644
--- a/libbb/default_error_retval.c
+++ b/libbb/default_error_retval.c
@@ -13,4 +13,6 @@
  */
 #include "libbb.h"
 
+#ifndef __VSF__
 uint8_t xfunc_error_retval = EXIT_FAILURE;
+#endif
diff --git a/libbb/getopt32.c b/libbb/getopt32.c
index e861d0567..0d611e089 100644
--- a/libbb/getopt32.c
+++ b/libbb/getopt32.c
@@ -311,11 +311,13 @@ typedef struct {
 	unsigned switch_off;
 	unsigned incongruously;
 	unsigned requires;
-	void **optarg;  /* char**, llist_t** or int *. */
+	void **poptarg;  /* char**, llist_t** or int *. */
 	int *counter;
 } t_complementary;
 
+#ifndef __VSF__
 uint32_t option_mask32;
+#endif
 
 #if ENABLE_LONG_OPTS
 static const struct option bb_null_long_options[1] = {
@@ -383,7 +385,7 @@ vgetopt32(char **argv, const char *applet_opts, const char *applet_long_options,
 		on_off->opt_char = *s;
 		on_off->switch_on = (1U << c);
 		if (*++s == ':') {
-			on_off->optarg = va_arg(p, void **);
+			on_off->poptarg = va_arg(p, void **);
 			if (s[1] == '+' || s[1] == '*') {
 				/* 'o:+' or 'o:*' */
 				on_off->param_type = (s[1] == '+') ?
@@ -433,7 +435,7 @@ vgetopt32(char **argv, const char *applet_opts, const char *applet_long_options,
 			on_off->opt_char = l_o->val;
 			on_off->switch_on = (1U << c);
 			if (l_o->has_arg != no_argument)
-				on_off->optarg = va_arg(p, void **);
+				on_off->poptarg = va_arg(p, void **);
 			c++;
  next_long: ;
 		}
@@ -561,12 +563,12 @@ vgetopt32(char **argv, const char *applet_opts, const char *applet_long_options,
 			(*(on_off->counter))++;
 		if (optarg) {
 			if (on_off->param_type == PARAM_LIST) {
-				llist_add_to_end((llist_t **)(on_off->optarg), optarg);
+				llist_add_to_end((llist_t **)(on_off->poptarg), optarg);
 			} else if (on_off->param_type == PARAM_INT) {
 //TODO: xatoi_positive indirectly pulls in printf machinery
-				*(unsigned*)(on_off->optarg) = xatoi_positive(optarg);
-			} else if (on_off->optarg) {
-				*(char **)(on_off->optarg) = optarg;
+				*(unsigned*)(on_off->poptarg) = xatoi_positive(optarg);
+			} else if (on_off->poptarg) {
+				*(char **)(on_off->poptarg) = optarg;
 			}
 		}
 	}
diff --git a/libbb/hash_md5_sha.c b/libbb/hash_md5_sha.c
index 880ffab01..de31d54e2 100644
--- a/libbb/hash_md5_sha.c
+++ b/libbb/hash_md5_sha.c
@@ -22,7 +22,11 @@ static void cpuid(unsigned *eax, unsigned *ebx, unsigned *ecx, unsigned *edx)
 		: "0"(*eax),  "1"(*ebx),  "2"(*ecx),  "3"(*edx)
 	);
 }
+#  ifdef __VSF__
+#   define shaNI (libbb_ctx->hash_md5_sha.shaNI)
+#  else
 static smallint shaNI;
+#  endif
 void FAST_FUNC sha1_process_block64_shaNI(sha1_ctx_t *ctx);
 void FAST_FUNC sha256_process_block64_shaNI(sha256_ctx_t *ctx);
 #  if defined(__i386__)
diff --git a/libbb/inet_common.c b/libbb/inet_common.c
index e9fbde7dc..0c1249b6a 100644
--- a/libbb/inet_common.c
+++ b/libbb/inet_common.c
@@ -86,7 +86,11 @@ char* FAST_FUNC INET_rresolve(struct sockaddr_in *s_in, int numeric, uint32_t ne
 		smallint is_host;
 		char name[1];
 	};
+#ifdef __VSF__
+# define cache (libbb_ctx->inet_common.fn_INET_rresolve.cache)
+#else
 	static struct addr *cache = NULL;
+#endif
 
 	struct addr *pn;
 	char *name;
@@ -145,6 +149,9 @@ char* FAST_FUNC INET_rresolve(struct sockaddr_in *s_in, int numeric, uint32_t ne
 	cache = pn;
 
 	return name;
+#ifdef __VSF__
+# undef cache
+#endif
 }
 
 #if ENABLE_FEATURE_IPV6
diff --git a/libbb/inode_hash.c b/libbb/inode_hash.c
index a125244ca..616fbc68a 100644
--- a/libbb/inode_hash.c
+++ b/libbb/inode_hash.c
@@ -29,7 +29,11 @@ typedef struct ino_dev_hash_bucket_struct {
 #define hash_inode(i)  ((unsigned)(i) % HASH_SIZE)
 
 /* array of [HASH_SIZE] elements */
+#ifdef __VSF__
+# define ino_dev_hashtable (libbb_ctx->inode_hash.ino_dev_hashtable)
+#else
 static ino_dev_hashtable_bucket_t **ino_dev_hashtable;
+#endif
 
 /*
  * Return name if statbuf->st_ino && statbuf->st_dev are recorded in
diff --git a/libbb/lineedit.c b/libbb/lineedit.c
index d6b2e76ff..eeca42428 100644
--- a/libbb/lineedit.c
+++ b/libbb/lineedit.c
@@ -189,7 +189,11 @@ struct lineedit_statics {
 };
 
 /* See lineedit_ptr_hack.c */
+#ifdef __VSF__
+# define lineedit_ptr_to_statics (libbb_ctx->lineedit_ptr_hack.lineedit_ptr_to_statics)
+#else
 extern struct lineedit_statics *BB_GLOBAL_CONST lineedit_ptr_to_statics;
+#endif
 
 #define S (*lineedit_ptr_to_statics)
 #define state            (S.state           )
diff --git a/libbb/lineedit_ptr_hack.c b/libbb/lineedit_ptr_hack.c
index dc45855d5..fc5af16fd 100644
--- a/libbb/lineedit_ptr_hack.c
+++ b/libbb/lineedit_ptr_hack.c
@@ -11,7 +11,9 @@ struct lineedit_statics;
 
 /* We cheat here. It is declared as const ptr in libbb.h,
  * but here we make it live in R/W memory */
+#ifndef __VSF__
 struct lineedit_statics *lineedit_ptr_to_statics;
+#endif
 
 #else
 
diff --git a/libbb/makedev.c b/libbb/makedev.c
index 06c4039a3..d4a5c9e10 100644
--- a/libbb/makedev.c
+++ b/libbb/makedev.c
@@ -14,7 +14,9 @@
  || defined(__APPLE__)
 # include <sys/types.h>
 #else
-# include <features.h>
+# ifndef __VSF__
+#  include <features.h>
+# endif
 # include <sys/sysmacros.h>
 #endif
 
diff --git a/libbb/pidfile.c b/libbb/pidfile.c
index a6a282562..581d2a423 100644
--- a/libbb/pidfile.c
+++ b/libbb/pidfile.c
@@ -11,7 +11,9 @@
 #define WANT_PIDFILE 1
 #include "libbb.h"
 
+#ifndef __VSF__
 smallint wrote_pidfile;
+#endif
 
 void FAST_FUNC write_pidfile(const char *path)
 {
diff --git a/libbb/procps.c b/libbb/procps.c
index f56b71b21..2471a491d 100644
--- a/libbb/procps.c
+++ b/libbb/procps.c
@@ -21,7 +21,11 @@ typedef struct cache_t {
 	int size;
 } cache_t;
 
+#ifdef __VSF__
+# define cache_user_group (libbb_ctx->procps.cache_user_group)
+#else
 static cache_t *cache_user_group;
+#endif
 
 void FAST_FUNC clear_username_cache(void)
 {
diff --git a/libbb/ptr_to_globals.c b/libbb/ptr_to_globals.c
index 2232c6864..b179c1d03 100644
--- a/libbb/ptr_to_globals.c
+++ b/libbb/ptr_to_globals.c
@@ -12,11 +12,13 @@ struct globals;
 
 /* We cheat here. It is declared as const ptr in libbb.h,
  * but here we make it live in R/W memory */
+#ifndef __VSF__
 struct globals *ptr_to_globals;
 
 #ifdef errno
 int *bb_errno;
 #endif
+#endif
 
 
 #else
diff --git a/libbb/pw_encrypt.c b/libbb/pw_encrypt.c
index 3463fd95b..1151ce682 100644
--- a/libbb/pw_encrypt.c
+++ b/libbb/pw_encrypt.c
@@ -103,8 +103,13 @@ to64(char *s, unsigned v, int n)
 /* Other advanced crypt ids (TODO?): */
 /* $2$ or $2a$: Blowfish */
 
+#ifdef __VSF__
+# define des_cctx (libbb_ctx->pw_encrypt.des_cctx)
+# define des_ctx (libbb_ctx->pw_encrypt.des_ctx)
+#else
 static struct const_des_ctx *des_cctx;
 static struct des_ctx *des_ctx;
+#endif
 
 /* my_crypt returns malloc'ed data */
 static char *my_crypt(const char *key, const char *salt)
diff --git a/libbb/signals.c b/libbb/signals.c
index 0bebc847d..d8a2fb607 100644
--- a/libbb/signals.c
+++ b/libbb/signals.c
@@ -11,7 +11,9 @@
 #include "libbb.h"
 
 /* All known arches use small ints for signals */
+#ifndef __VSF__
 smallint bb_got_signal;
+#endif
 
 void record_signo(int signo)
 {
diff --git a/libbb/u_signal_names.c b/libbb/u_signal_names.c
index f7d598c7a..b76618d04 100644
--- a/libbb/u_signal_names.c
+++ b/libbb/u_signal_names.c
@@ -238,7 +238,7 @@ const char* FAST_FUNC get_signame(int number)
 			return signals[number];
 	}
 
-	return itoa(number);
+	return busybox_itoa(number);
 }
 
 
diff --git a/libbb/verror_msg.c b/libbb/verror_msg.c
index 71512aee2..0b865cadd 100644
--- a/libbb/verror_msg.c
+++ b/libbb/verror_msg.c
@@ -11,11 +11,15 @@
 # include <syslog.h>
 #endif
 
+#ifdef __VSF__
+# define syslog_level (libbb_ctx->verror_msg.syslog_level)
+#else
 #if ENABLE_FEATURE_SYSLOG
 static smallint syslog_level = LOG_ERR;
 #endif
 smallint logmode = LOGMODE_STDIO;
 const char *msg_eol = "\n";
+#endif
 
 void FAST_FUNC bb_verror_msg(const char *s, va_list p, const char* strerr)
 {
diff --git a/libbb/xfuncs.c b/libbb/xfuncs.c
index 465e5366c..af1feeaaf 100644
--- a/libbb/xfuncs.c
+++ b/libbb/xfuncs.c
@@ -110,7 +110,11 @@ char* FAST_FUNC itoa_to_buf(int n, char *buf, unsigned buflen)
 // It so happens that sizeof(int) * 3 is enough for 32+ bit ints.
 // (sizeof(int) * 3 + 2 is correct for any width, even 8-bit)
 
+#ifdef __VSF__
+# define local_buf (libbb_ctx->xfuncs.local_buf)
+#else
 static char local_buf[sizeof(int) * 3];
+#endif
 
 /* Convert unsigned integer to ascii using a static buffer (returned). */
 char* FAST_FUNC utoa(unsigned n)
@@ -121,7 +125,7 @@ char* FAST_FUNC utoa(unsigned n)
 }
 
 /* Convert signed integer to ascii using a static buffer (returned). */
-char* FAST_FUNC itoa(int n)
+char* FAST_FUNC busybox_itoa(int n)
 {
 	*(itoa_to_buf(n, local_buf, sizeof(local_buf) - 1)) = '\0';
 
diff --git a/loginutils/addgroup.c b/loginutils/addgroup.c
index 2a83c8a15..62af88c43 100644
--- a/loginutils/addgroup.c
+++ b/loginutils/addgroup.c
@@ -76,7 +76,7 @@ static void xgroup_study(struct group *g)
 		}
 		if (option_mask32 & OPT_GID) {
 			/* -g N, cannot pick gid other than N: error */
-			bb_error_msg_and_die("%s '%s' in use", "gid", itoa(g->gr_gid));
+			bb_error_msg_and_die("%s '%s' in use", "gid", busybox_itoa(g->gr_gid));
 			/* this format strings is reused in adduser and addgroup */
 		}
 		if (g->gr_gid == max) {
diff --git a/loginutils/adduser.c b/loginutils/adduser.c
index d3c795afa..d491531b9 100644
--- a/loginutils/adduser.c
+++ b/loginutils/adduser.c
@@ -110,7 +110,7 @@ static void passwd_study(struct passwd *p)
 	while (getpwuid(p->pw_uid) || (p->pw_gid == (gid_t)-1 && getgrgid(p->pw_uid))) {
 		if (option_mask32 & OPT_UID) {
 			/* -u N, cannot pick uid other than N: error */
-			bb_error_msg_and_die("%s '%s' in use", "uid", itoa(p->pw_uid));
+			bb_error_msg_and_die("%s '%s' in use", "uid", busybox_itoa(p->pw_uid));
 			/* this format string is reused in adduser and addgroup */
 		}
 		if (p->pw_uid == max) {
diff --git a/miscutils/fbsplash.c b/miscutils/fbsplash.c
index 2934d8eb7..8d9ba6c5c 100644
--- a/miscutils/fbsplash.c
+++ b/miscutils/fbsplash.c
@@ -555,7 +555,7 @@ int fbsplash_main(int argc UNUSED_PARAM, char **argv)
 		num = atoi(num_buf);
 		if (isdigit(num_buf[0]) && (num <= 100)) {
 #if DEBUG
-			DEBUG_MESSAGE(itoa(num));
+			DEBUG_MESSAGE(busybox_itoa(num));
 #endif
 			fb_drawprogressbar(num);
 		}
diff --git a/networking/libiproute/rt_names.c b/networking/libiproute/rt_names.c
index 3c2fad912..5999f3b8d 100644
--- a/networking/libiproute/rt_names.c
+++ b/networking/libiproute/rt_names.c
@@ -104,14 +104,14 @@ static void rtnl_rtprot_initialize(void)
 const char* FAST_FUNC rtnl_rtprot_n2a(int id)
 {
 	if (id < 0 || id > RT_TABLE_MAX) {
-		return itoa(id);
+		return busybox_itoa(id);
 	}
 
 	rtnl_rtprot_initialize();
 
 	if (rtnl_rtprot_tab->tab[id])
 		return rtnl_rtprot_tab->tab[id];
-	return itoa(id);
+	return busybox_itoa(id);
 }
 #endif
 
@@ -140,14 +140,14 @@ static void rtnl_rtscope_initialize(void)
 const char* FAST_FUNC rtnl_rtscope_n2a(int id)
 {
 	if (id < 0 || id > RT_TABLE_MAX) {
-		return itoa(id);
+		return busybox_itoa(id);
 	}
 
 	rtnl_rtscope_initialize();
 
 	if (rtnl_rtscope_tab->tab[id])
 		return rtnl_rtscope_tab->tab[id];
-	return itoa(id);
+	return busybox_itoa(id);
 }
 
 int FAST_FUNC rtnl_rtscope_a2n(uint32_t *id, char *arg)
@@ -177,14 +177,14 @@ int FAST_FUNC rtnl_rtrealm_a2n(uint32_t *id, char *arg)
 const char* FAST_FUNC rtnl_rtrealm_n2a(int id)
 {
 	if (id < 0 || id > RT_TABLE_MAX) {
-		return itoa(id);
+		return busybox_itoa(id);
 	}
 
 	rtnl_rtrealm_initialize();
 
 	if (rtnl_rtrealm_tab->tab[id])
 		return rtnl_rtrealm_tab->tab[id];
-	return itoa(id);
+	return busybox_itoa(id);
 }
 #endif
 
@@ -202,14 +202,14 @@ static void rtnl_rtdsfield_initialize(void)
 const char* FAST_FUNC rtnl_dsfield_n2a(int id)
 {
 	if (id < 0 || id > RT_TABLE_MAX) {
-		return itoa(id);
+		return busybox_itoa(id);
 	}
 
 	rtnl_rtdsfield_initialize();
 
 	if (rtnl_rtdsfield_tab->tab[id])
 		return rtnl_rtdsfield_tab->tab[id];
-	return itoa(id);
+	return busybox_itoa(id);
 }
 
 int FAST_FUNC rtnl_dsfield_a2n(uint32_t *id, char *arg)
@@ -238,14 +238,14 @@ static void rtnl_rttable_initialize(void)
 const char* FAST_FUNC rtnl_rttable_n2a(int id)
 {
 	if (id < 0 || id > RT_TABLE_MAX) {
-		return itoa(id);
+		return busybox_itoa(id);
 	}
 
 	rtnl_rttable_initialize();
 
 	if (rtnl_rttable_tab->tab[id])
 		return rtnl_rttable_tab->tab[id];
-	return itoa(id);
+	return busybox_itoa(id);
 }
 
 int FAST_FUNC rtnl_rttable_a2n(uint32_t *id, char *arg)
diff --git a/networking/libiproute/rtm_map.c b/networking/libiproute/rtm_map.c
index 8b94c2f24..a3746f9f9 100644
--- a/networking/libiproute/rtm_map.c
+++ b/networking/libiproute/rtm_map.c
@@ -61,7 +61,7 @@ const char* FAST_FUNC rtnl_rtntype_n2a(int id)
 	case RTN_XRESOLVE:
 		return str_xresolve;
 	default:
-		return itoa(id);
+		return busybox_itoa(id);
 	}
 }
 
diff --git a/networking/netstat.c b/networking/netstat.c
index 807800a62..82889307d 100644
--- a/networking/netstat.c
+++ b/networking/netstat.c
@@ -386,7 +386,7 @@ static const char *get_sname(int port, const char *proto, int numeric)
 			return se->s_name;
 	}
 	/* hummm, we may return static buffer here!! */
-	return itoa(ntohs(port));
+	return busybox_itoa(ntohs(port));
 }
 
 static char *ip_port_str(struct sockaddr *addr, int port, const char *proto, int numeric)
@@ -539,7 +539,7 @@ static int FAST_FUNC raw_do_one(char *line)
 		return 1;
 
 	have_remaddr = NOT_NULL_ADDR(param.remaddr);
-	print_inet_line(&param, itoa(param.state), "raw", have_remaddr);
+	print_inet_line(&param, busybox_itoa(param.state), "raw", have_remaddr);
 	return 0;
 }
 
diff --git a/networking/tls.c b/networking/tls.c
index 8d074c058..52d56fded 100644
--- a/networking/tls.c
+++ b/networking/tls.c
@@ -990,7 +990,7 @@ static const char *alert_text(int code)
 	case 80:  return "internal error";
 	case 112: return "unrecognized name";
 	}
-	return itoa(code);
+	return busybox_itoa(code);
 }
 
 static void tls_aesgcm_decrypt(tls_state_t *tls, uint8_t *buf, int size)
diff --git a/shell/ash.c b/shell/ash.c
index 18ccc1329..832924b4e 100644
--- a/shell/ash.c
+++ b/shell/ash.c
@@ -11714,7 +11714,7 @@ getopts(char *optstr, char *optvar, char **optfirst)
 		setvar0("OPTARG", nullstr);
  out:
 	ind = optnext - optfirst + 1;
-	setvar("OPTIND", itoa(ind), VNOFUNC);
+	setvar("OPTIND", busybox_itoa(ind), VNOFUNC);
 	sbuf[0] = c;
 	/*sbuf[1] = '\0'; - already is */
 	setvar0(optvar, sbuf);
diff --git a/shell/hush.c b/shell/hush.c
index d111f0cc5..2d036a74d 100644
--- a/shell/hush.c
+++ b/shell/hush.c
@@ -2099,8 +2099,11 @@ static void hush_exit(int exitcode)
 		cur_var = G.top_var;
 		while (cur_var) {
 			struct variable *tmp = cur_var;
+# ifndef __VSF__
+			// environment is freed in vsf
 			if (!cur_var->max_len)
 				free(cur_var->varstr);
+# endif
 			cur_var = cur_var->next;
 			free(tmp);
 		}
@@ -9229,6 +9232,97 @@ static int redirect_and_varexp_helper(
 
 	return setup_redirects(command, sqp);
 }
+
+#ifdef __VSF__
+
+#include <spawn.h>
+
+extern int __vsf_linux_spawn(pid_t *pid, vsf_linux_main_entry_t entry,
+                const posix_spawn_file_actions_t *actions,
+                const posix_spawnattr_t *attr,
+                char * const argv[], char * const env[], void *priv, int priv_size);
+extern void * __vsf_linux_get_process_priv(vsf_linux_process_t *process);
+
+struct pipe_process_priv {
+	int next_infd;
+	struct fd_pair pipefds;
+	struct pipe *pi;
+	struct command *command;
+	volatile nommu_save_t nommu_save;
+	char **argv_expanded;
+};
+
+static NOINLINE int pipe_process(int argc, char *argv[])
+{
+	struct __busybox_libbb_ctx *lbb_ctx = (struct __busybox_libbb_ctx *)__vsf_linux_get_process_priv(NULL);
+	struct pipe_process_priv *priv = (struct pipe_process_priv *)lbb_ctx->__args.buffer;
+	int next_infd = priv->next_infd;
+	struct fd_pair pipefds = priv->pipefds;
+	struct pipe *pi = priv->pi;
+	struct command *command = priv->command;
+	volatile nommu_save_t nommu_save = priv->nommu_save;
+
+	declare_vsf_busybox_mod(libbb_fork);
+	vsf_linux_dynlib_ctx_set(&vsf_busybox_mod_name(libbb_fork), lbb_ctx);
+
+#if ENABLE_HUSH_JOB
+	disable_restore_tty_pgrp_on_exit();
+	CLEAR_RANDOM_T(&G.random_gen); /* or else $RANDOM repeats in child */
+
+	/* Every child adds itself to new process group
+	 * with pgid == pid_of_first_child_in_pipe */
+	if (G.run_list_level == 1 && G_interactive_fd) {
+		pid_t pgrp;
+		pgrp = pi->pgrp;
+		if (pgrp < 0) /* true for 1st process only */
+			pgrp = getpid();
+		if (setpgid(0, pgrp) == 0
+		 && pi->followup != PIPE_BG
+		 && G_saved_tty_pgrp /* we have ctty */
+		) {
+			/* We do it in *every* child, not just first,
+			 * to avoid races */
+			tcsetpgrp(G_interactive_fd, pgrp);
+		}
+	}
+#endif
+	if (pi->alive_cmds == 0 && pi->followup == PIPE_BG) {
+		/* 1st cmd in backgrounded pipe
+		 * should have its stdin /dev/null'ed */
+		close(0);
+		if (open(bb_dev_null, O_RDONLY))
+			xopen("/", O_RDONLY);
+	} else {
+		xmove_fd(next_infd, 0);
+	}
+	xmove_fd(pipefds.wr, 1);
+	if (pipefds.rd > 1)
+		close(pipefds.rd);
+	/* Like bash, explicit redirects override pipes,
+	 * and the pipe fd (fd#1) is available for dup'ing:
+	 * "cmd1 2>&1 | cmd2": fd#1 is duped to fd#2, thus stderr
+	 * of cmd1 goes into pipe.
+	 */
+	if (setup_redirects(command, NULL)) {
+		/* Happens when redir file can't be opened:
+		 * $ hush -c 'echo FOO >&2 | echo BAR 3>/qwe/rty; echo BAZ'
+		 * FOO
+		 * hush: can't open '/qwe/rty': No such file or directory
+		 * BAZ
+		 * (echo BAR is not executed, it hits _exit(1) below)
+		 */
+		_exit(1);
+	}
+
+	/* Stores to nommu_save list of env vars putenv'ed
+	 * (NOMMU, on MMU we don't need that) */
+	/* cast away volatility... */
+	pseudo_exec((nommu_save_t*) &nommu_save, command, argv);
+	/* pseudo_exec() does not return */
+}
+
+#endif
+
 static NOINLINE int run_pipe(struct pipe *pi)
 {
 	static const char *const null_ptr = NULL;
@@ -9584,6 +9678,20 @@ static NOINLINE int run_pipe(struct pipe *pi)
 		G.execute_lineno = command->lineno;
 #endif
 
+#ifdef __VSF__
+		struct pipe_process_priv priv = {
+			.next_infd		= next_infd,
+			.pipefds		= pipefds,
+			.pi				= pi,
+			.command		= command,
+			.nommu_save		= nommu_save,
+		};
+		struct __busybox_libbb_ctx *lbb_ctx = libbb_ctx;
+		memcpy(lbb_ctx->__args.buffer, &priv, sizeof(priv));
+
+		command->pid = -1;
+		__vsf_linux_spawn(&command->pid, pipe_process, NULL, NULL, argv_expanded, NULL, lbb_ctx, sizeof(*lbb_ctx));
+#else
 		command->pid = BB_MMU ? fork() : vfork();
 		if (!command->pid) { /* child */
 #if ENABLE_HUSH_JOB
@@ -9641,6 +9749,7 @@ static NOINLINE int run_pipe(struct pipe *pi)
 			pseudo_exec((nommu_save_t*) &nommu_save, command, argv_expanded);
 			/* pseudo_exec() does not return */
 		}
+#endif
 
 		/* parent or error */
 #if ENABLE_HUSH_FAST